---
description: CIM Development Rules and Workflow
globs:
alwaysApply: true
---

# CIM Development Rules - MUST FOLLOW

## üö® CRITICAL: Filename Convention
**ALL code files MUST be lowercase with underscores (snake_case)**
- ‚úÖ Correct: `event_handler.rs`, `domain_types.rs`, `readme.md`
- ‚ùå Wrong: `EventHandler.rs`, `DomainTypes.rs`, `README.md`
- Documentation files (README.md, CHANGELOG.md) use standard casing
- This applies to ALL file extensions: `.rs`, `.toml`, `.json`, etc.

## üìã Core Development Rules

### 1. Architecture Principles
- **CQRS Only** - Zero CRUD operations allowed
- **Event-Driven** - Commands produce events, events build projections
- **Layer Boundaries** - Never access infrastructure from domain
- **Single Responsibility** - Each module does ONE thing only
- **Dependency Injection** - Inject dependencies, don't create them

### 2. Development Workflow
1. **Read First** - Check `/doc/design` and `/doc/plan` before coding
2. **Test First** - Write tests before implementation (TDD)
3. **Build Incrementally** - One module at a time
4. **Git Add New Files** - Required for compilation in NixOS
5. **Verify Each Step** - Confirm working before proceeding

### 3. Environment Context
- You are in **NixOS with direnv** - shell is always devshell
- Use **MCP tools** when available
- Keep scope **minimal** - address only the task at hand
- Update **progress graph** at `/doc/progress/progress.json`

## üéØ Task Execution Checklist

### Before Starting:
- [ ] Read relevant documentation in `.claude/`
- [ ] Check `/doc/design` for architecture decisions
- [ ] Review `/doc/plan` for implementation approach
- [ ] Verify no naming conflicts (lowercase rule)

### During Development:
- [ ] Write test first (TDD)
- [ ] Implement minimal solution
- [ ] Run tests to verify
- [ ] Git add new files
- [ ] Document decisions

### Definition of Done:
- [ ] DESIGNED - Architecture documented
- [ ] PLANNED - Implementation approach clear
- [ ] IMPLEMENTED - Code complete
- [ ] VERIFIED - Manual testing passed
- [ ] TESTED - Automated tests pass
- [ ] COMPLETE - All acceptance criteria met
- [ ] DONE - Ready for production

## üõ†Ô∏è Common Commands

```bash
# Run tests for specific module
cargo test --package cim_[module]

# Check compilation
cargo check

# Run with logging
RUST_LOG=debug cargo run

# Update progress (example)
echo '{"current_task": "implementing_domain_x", "status": "in_progress"}' > /doc/progress/progress.json
```

## ‚ö†Ô∏è When to Stop and Ask

**STOP if you encounter:**
- Conflict between `/doc/design` and `/doc/plan`
- Unclear architectural decision
- Missing domain boundaries
- Circular dependencies
- Need to violate CQRS principles

## üìö Quick Links

- **Architecture**: See `cim-architecture.mdc`
- **Templates**: Use `quick-reference.mdc`
- **Testing**: Follow `tdd.mdc`
- **Quality**: Check against `qa.mdc`

Remember: When in doubt, check `index.mdc` for navigation.